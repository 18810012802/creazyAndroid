package com.jb.genemap.next.view;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import com.flowCal.device.model.main.Substation;
import com.jb.genemap.next.model.DataSourceType;
import com.jb.genemap.next.model.deviceTypes.DeviceInfo;
import com.jb.genemap.next.service.DeviceInfoList;
import com.jb.genemap.next.service.ParseDB;
import com.jb.genemap.next.service.utils.ReadFromCime;

//生成。svg文件的主程序
public class Main {

	private static List<DeviceInfo> paramList;
	public static String filePath="c:/next.svg";
	/**
	 * 北京大兴 （211总部）
	 * 双母旁路：北京-大兴-永和庄站.cime;
	 */
	/**
	 * 上海静安
	 * 双母旁路： 上海-静安-大田站.cime;上海-静安-余姚站.cime;
	 * 单母接线： 上海-静安-南阳站.cime;上海-静安-江宁站.cime;上海-静安-乌北站.cime
	 * 混合接线： 上海-静安-常德站.cime;上海-静安-康定站.cime;上海-静安-武定站.cime;上海-静安-新茂名站.cime;上海-静安-延平站.cime;上海-静安-永源站.cime
	 * 开闭站：上海-静安-安义站.cime;上海-静安-奉贤站.cime;上海-静安-赵家站.cime
	 * 3/2接线：（未实现）上海-静安-华山站.cime
	 * 高中低3侧：（未实现）上海-静安-静安站.cime
	 */ 
	/**
	 * 北京亦庄
	 * 双母旁路 北京-亦庄-泰和站.cime;（不支持,接地变）北京-亦庄-庆羊站.cime;北京-亦庄-华康站.cime;北京-亦庄-文化园站.cime
	 * 双母 高压母线上有2台变压器 （不支持） 北京-亦庄-兴业站.cime;北京-亦庄-景园街站.cime
	 * 单母接线  北京-亦庄-博兴站.cime;北京-亦庄-京东方站.cime;北京-亦庄-科创街站.cime;北京-亦庄-亦庄站.cime
	 */
	public static String cimeFilePath="G:\\上海-静安-常德站.cime";
//	public static String cimeFilePath = "C:\\shanghai_12_20150525.CIME";
	public static double canvasWidth=8000.0;
	public static double canvasHeight=2000.0;
	public static double adjustDistance=2150;
	public static Scanner scanner=new Scanner(System.in);
	/**
	 * @param args
	 * @throws IOException 
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//GetParamMap getParamMap = new GetParamMap();
		//ConcatDevSvgStr concatDevSvgStr = new ConcatDevSvgStr();
		//getParamMap.setDevMap();
		
		/**
		 * 北京大兴 （211总部）
		 * 双母旁路：永和庒 a4cef88c-004a-48c3-b4a7-cd865e512381
		 */
		/**
		 * 上海静安(254数据库)
		 * 双母旁路： 大田 ba6ed847-43f9-4077-9673-0163cae9cdb2 余姚 75851531-40c8-4d3b-a6d7-dfd1c35dd479
		 * 单母接线： 南阳 7469328c-aac4-4902-a838-fb7d1146d09a 江宁 7d9bc593-dc16-433e-b1f8-5cd15545d011 乌北 86c54c0c-691e-45c2-acad-ea3ca6b00077
		 * 混合接线：（单母+双母） 常德 d8d644f9-a057-4837-869d-ff09ba995e3e 康定 6d625c2a-2575-44e9-8c6c-0f4b5373574b 武定 c7e28837-0c30-410d-9ddb-86c30b927534
		 * 新茂名 0fd7c253-6afd-4e07-9441-2ff204e67606 延平 3c761bdd-5dee-494a-9e40-418d25f725d6 永源 2ff275f1-211d-4bf6-b67b-a4ecd0e4785d
		 * 开闭站：安义 03bcdd07-d33d-4574-9d7f-633966b46037 奉贤 3a6cb088-8d2b-413c-b4c3-764bbba23daa 赵家 72764138-5530-41d0-b21f-d9b6193d659d
		 * 3/2接线：（未实现）华山 6c567416-bcd1-4451-9801-ba4b67c64679
		 * 高中低3侧：（未实现）静安 9065cd0e-04ca-4b9b-9b3a-eef5f15031d0
		 */ 
		/**
		 * 北京亦庄（211总部） 
		 * 双母旁路 泰和（支持 ）3c9e9fd8-2ab3-4c21-b1b2-606278eba033  华康站 （支持 ）4e08360a-5f1a-4844-b498-e1b9e83bd51b 文化园 （支持 ）57ae45de-8e62-4c88-bff4-8231fab1608b 
		 * 双母 高压母线上有2台变压器 （不支持）庆羊  595881e2-d74a-407e-a2a5-1b2fa69da906  兴业站 e16f340d-512c-41b8-863a-168775d507d5 景园街 df4dd02a-5a03-4eff-aa0e-0ea13674ec12 
		 * 单母接线  博兴站 7dafeec6-6c3b-4900-8377-b784d391161b 京东方 179c11f1-e5b7-468d-8171-3f8baf6907df 科创街 8d53e2a9-cf62-4dfa-a8c8-4714ccc32a17 亦庄站  edcdd974-caf8-4ac0-9db3-1d83c43c3f5a
		 */
		//Scanner scanner=new Scanner(System.in);
		boolean develop=false;
		if(develop){
			String ids="9065cd0e-04ca-4b9b-9b3a-eef5f15031d0";
			DeviceInfoList d=null;
			try {
				d = new DeviceInfoList(DataSourceType.DATABASE,ids);
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			StringBuilder svgStr = new StringBuilder("<?xml version='1.0' encoding='UTF-8'?><svg width='"+canvasWidth+"' height='"+canvasHeight+"'>");

			for(DeviceInfo deviceInfo : d.getDeviceInfoList()){
				String str = deviceInfo.getSvgStr();
				svgStr.append(str).append(deviceInfo.addText());
			}
			svgStr.append("</svg>");
			try {
				File f = new File(filePath);
				FileWriter fw = new FileWriter(f);
				BufferedWriter bw = new BufferedWriter(fw);
				bw.write(svgStr.toString());
				bw.close();
				fw.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		
		}else{
			ok:while(true){
				StringBuilder svgStr = new StringBuilder("<?xml version='1.0' encoding='UTF-8'?><svg width='"+canvasWidth+"' height='"+canvasHeight+"'>");

				for(DeviceInfo deviceInfo : Main.clientForList(null)){
					String str = deviceInfo.getSvgStr();
					svgStr.append(str).append(deviceInfo.addText());
				}
				svgStr.append("</svg>");
				try {
					File f = new File(filePath);
					FileWriter fw = new FileWriter(f);
					BufferedWriter bw = new BufferedWriter(fw);
					bw.write(svgStr.toString());
					bw.close();
					fw.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
				
				System.out.println("是否继续(Y/N):");
				
				ok2:while(true){
					String line=scanner.nextLine().trim();
					if("y".equalsIgnoreCase(line)){
						System.out.println("请输入命令(如'help')：");
						while(true){
							String line2=scanner.nextLine().trim();
							if("adjust".equalsIgnoreCase(line2)||"restart".equalsIgnoreCase(line2)||"help".equalsIgnoreCase(line2)){
								paramList.removeAll(paramList);
								paramList=clientForList(line2);
								System.out.println("是否继续(Y/N):");
								break;
							}else{
								System.out.println("无此命令，请输入命令(如'help')：");
								continue;
							}
							
						}
					}else if("n".equalsIgnoreCase(line)){
						break ok;
					}else{
						if("adjust".equalsIgnoreCase(line)||"restart".equalsIgnoreCase(line)){
							paramList.removeAll(paramList);
							paramList=clientForList(line);
							break;
						}else{
							System.out.println("输入有误，是否需要继续(Y/N)：");
							continue;
						}
						
					}
				}
				
				
				
				/*System.out.println("---------------------------------------------");
				paramList.removeAll(paramList);*/
			}
			scanner.close();
		}
	
	}
	
	public static List<DeviceInfo> clientForList(String command){
		int source=0;
		if(!"adjust".equalsIgnoreCase(command)&&!"help".equalsIgnoreCase(command)){
			System.out.println("请选择数据来源(C代表cime文件,D代表数据库):");
			while(true){
				
				String line=scanner.nextLine().trim();
				if(line.equalsIgnoreCase("C")){
					source=DataSourceType.CIME;
					break;
				}else if(line.equalsIgnoreCase("D")){
					source=DataSourceType.DATABASE;
					break;
				}else{
					System.out.println("输入有误,请选择数据来源('C'代表cime文件,'D'代表数据库):");
				}
			}
			System.out.println("请输入变电站名称或ID(例如'静安站'或'9065cd0e-04ca-4b9b-9b3a-eef5f15031d0'):");
			command=null;
		}
		String line="";
		while(true){
			//Scanner scanner=new Scanner(System.in);
			
			if(command==null){
				line=scanner.nextLine().trim();
			}else{
				line=command;
				command=null;
			}
			//重新开始
			if(line.trim().equalsIgnoreCase("help")){
				System.out.println("help:查看命令说明");
				System.out.println("restart:回到起始操作");
				System.out.println("adjust:调整参数，更改画幅长度");
				while(true){
					System.out.println("请输入命令(如'help')：");
					String line2=scanner.nextLine().trim();
					if("adjust".equalsIgnoreCase(line2)||"restart".equalsIgnoreCase(line2)||"help".equalsIgnoreCase(line2)){
						paramList=clientForList(line2);
						return paramList;
					}else{
						System.out.println("无此命令，请输入命令(如'help')：");
						continue;
					}
				}
			}
			//重新开始
			if(line.trim().equalsIgnoreCase("restart")){
				paramList=clientForList(null);
				return paramList;
			}
			if(line.trim().equalsIgnoreCase("adjust")){
				while(true){
					System.out.println("当前调整参数adjustDistance="+adjustDistance+",请输入新值：");
					String line2=scanner.nextLine().trim();
					try {
						adjustDistance=Integer.parseInt(line2);
						if(adjustDistance>canvasWidth||adjustDistance<100){
							System.out.println("调整参数为100至"+canvasWidth+"之间的一个数，请重新输入：");
							continue;
						}else{
							System.out.println("调整参数修改成功，当前值为："+adjustDistance);
							break;
						}
					} catch (Exception e) {
						// TODO Auto-generated catch block
						System.out.println("调整参数为数字，请重新输入：");
						continue;
					}
				}
			}
			DeviceInfoList d=null;
			if(line.contains("站")||(line.charAt(0)>19968 && line.charAt(0)<40623)){
				if(source==DataSourceType.CIME){
					ReadFromCime readCimeFile = new ReadFromCime();
					List<Substation> subList = null;
					try {
						subList = readCimeFile.ReadCIMEForSubs(Main.cimeFilePath, line);
					} catch (Exception e1) {
						// TODO Auto-generated catch block
						System.out.println("cime文件路径不存在！");
						break;
					}
					if(subList.size()==1){
						Substation s = subList.get(0);
						String id=s.getMRID();
						try {
							d = new DeviceInfoList(DataSourceType.CIME,id);
						} catch (Exception e) {
							// TODO Auto-generated catch block
							System.out.println("cime文件中无此名称对应的变电站信息，请输入变电站名称或ID：");
							continue;
						}
						paramList = d.getDeviceInfoList();
						break;
					}else if(subList.size()>1){
						System.out.println("cime文件中有以下变电站备选：");
						List<String> keys=new ArrayList<String>();
						for(int i=0;i<subList.size();i++){
							Substation s = subList.get(i);
							System.out.println("ID="+s.getMRID()+",名称="+s.getName()+",编号="+i);
							keys.add(s.getMRID());
						}
						
						System.out.println("请输入编号：");
						//Scanner scanner2=new Scanner(System.in);
						String line2=scanner.nextLine().trim();
						try {
							d = new DeviceInfoList(DataSourceType.CIME,keys.get(Integer.parseInt(line2)));
						} catch (Exception e) {
							// TODO Auto-generated catch block
							
							System.out.println("请输入变电站名称或ID：");
							continue;
						}
						paramList = d.getDeviceInfoList();
						break;
					}else{
						System.out.println("cime文件中无此名称对应的变电站信息，请输入变电站名称或ID：");
					}
				}else{
					Map<String,String> subMsg=null;
					try{
					subMsg=ParseDB.getSubMsgByName(line);
					}catch(Exception e){
						System.out.println("数据库url不存在！");
						break;
					}
					if(subMsg.size()==1){
						Iterator it=subMsg.keySet().iterator();
						String id=it.next().toString();
						try {
							d = new DeviceInfoList(DataSourceType.DATABASE,id);
						} catch (Exception e) {
							// TODO Auto-generated catch block
							System.out.println("数据库中无此名称对应的变电站信息，请输入变电站名称或ID：");
							continue;
						}
						paramList = d.getDeviceInfoList();
						break;
					}else if(subMsg.size()>1){
						System.out.println("数据库中有以下变电站备选：");
						Iterator it=subMsg.keySet().iterator();
						List<String> keys=new ArrayList<String>();
						int count=0;
						while(it.hasNext()){
							String key=it.next().toString();
							String value=subMsg.get(key);
							System.out.println("ID="+key+",名称="+value+",编号="+count);
							keys.add(key);
							count++;
						}
						System.out.println("请输入编号：");
						//Scanner scanner2=new Scanner(System.in);
						String line2=scanner.nextLine().trim();
						try {
							d = new DeviceInfoList(DataSourceType.DATABASE,keys.get(Integer.parseInt(line2)));
						} catch (Exception e) {
							// TODO Auto-generated catch block
							System.out.println("请输入变电站名称或ID：");
							continue;
						}
						paramList = d.getDeviceInfoList();
						break;
					}else{
						System.out.println("数据库中无此名称对应的变电站信息，请输入变电站名称或ID：");
					}
				}
				
			}else if(!line.trim().equals("")){
				if(source==DataSourceType.CIME){
					try {
						d = new DeviceInfoList(DataSourceType.CIME,line);
					} catch (Exception e) {
						// TODO Auto-generated catch block
						if(line.equalsIgnoreCase("adjust")){
							break;
						}else{
							System.out.println("文件内无此ID对应的变电站信息，请输入变电站名称或ID：");
						}
						continue;
					}
					paramList = d.getDeviceInfoList();
				}else{
					try {
						d = new DeviceInfoList(DataSourceType.DATABASE,line);
					} catch (Exception e) {
						// TODO Auto-generated catch block
						if(line.equalsIgnoreCase("adjust")){
							break;
						}else{
							System.out.println("数据库中无此ID对应的变电站信息，请输入变电站名称或ID：");
						}
						continue;
					}
					paramList = d.getDeviceInfoList();
				}
				break;
			}else{
				System.out.println("文件内无此ID对应的变电站信息，请输入变电站名称或ID：");
			}
		}
		//scanner.close();
		return paramList;
	}
	
}
